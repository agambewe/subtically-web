{"remainingRequest":"/Users/bewe/Documents/ppta/subtically/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/bewe/Documents/ppta/subtically/web/src/components/video/updateController.vue?vue&type=style&index=0&id=6cd0ac2e&scoped=true&lang=css&","dependencies":[{"path":"/Users/bewe/Documents/ppta/subtically/web/src/components/video/updateController.vue","mtime":1617316538796},{"path":"/Users/bewe/Documents/ppta/subtically/web/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/bewe/Documents/ppta/subtically/web/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/bewe/Documents/ppta/subtically/web/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/bewe/Documents/ppta/subtically/web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/bewe/Documents/ppta/subtically/web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCkBpbXBvcnQgdXJsKCJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9U2hhcmUrVGVjaCtNb25vIik7Cgp0YWJsZSB0aCArIHRoIHsgYm9yZGVyLWxlZnQ6MXB4IHNvbGlkICNkZGRkZGQ7IH0KdGFibGUgdGQgKyB0ZCB7IGJvcmRlci1sZWZ0OjFweCBzb2xpZCAjZGRkZGRkOyB9CnRib2R5IHRyOm50aC1vZi10eXBlKG9kZCkgewogICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAuMDUpOwp9Cgoudi1kYXRhLXRhYmxlCi9kZWVwLwp0Ym9keQovZGVlcC8KdHI6aG92ZXI6bm90KC52LWRhdGEtdGFibGVfX2V4cGFuZGVkX19jb250ZW50KSB7CiAgICBiYWNrZ3JvdW5kOiAjODc5N2E4ICFpbXBvcnRhbnQ7Cn0KCi52LXNlbGVjdF9fc2VsZWN0aW9ucyB7CiAgICBtYXgtd2lkdGg6IDE1MHB4OwogICAgbWluLXdpZHRoOiAxMDBweDsKICAgIGJvcmRlcjogbm9uZTsKfQoKLmZsZXggewogICAgZGlzcGxheTogLXdlYmtpdC1ib3g7CiAgICBkaXNwbGF5OiAtbW96LWJveDsKICAgIGRpc3BsYXk6IC1tcy1mbGV4Ym94OwogICAgZGlzcGxheTogLXdlYmtpdC1mbGV4OwogICAgZGlzcGxheTogZmxleDsKfQo="},{"version":3,"sources":["updateController.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"updateController.vue","sourceRoot":"src/components/video","sourcesContent":["<template>\n    <v-container dark>\n        <v-container grid-list-md mb-0>\n            <h1 class=\"text-md-center\" style=\"font-family: 'Share Tech Mono';text-shadow: -2px 4px 4px silver\">Update Video</h1>\n            <v-layout row wrap style=\"margin:10px\">\n                <v-dialog v-model=\"dialog\" persistent max-width=\"500px\">\n                    <template v-slot:activator=\"{ on }\">\n                        <v-flex class=\"flex\" xs8 style=\"float:right;widht:300\">\n                            <v-btn class=\"mx-2\" fab color=\"primary\" v-on=\"on\" router to=\"/my-videos\">\n                                Back\n                            </v-btn>\n                        </v-flex>\n                    </template>\n                </v-dialog>\n            </v-layout>\n            <v-card>\n                <v-card-text>\n                    <v-container>\n                        <ValidationObserver ref=\"observer\" v-slot=\"{  }\">\n                            <v-form>\n                                <v-row>\n                                    <v-col cols=\"12\" sm=\"6\" md=\"6\">\n                                        <ValidationProvider v-slot=\"{ errors }\" name='Title' rules=\"required\">\n                                            <v-text-field \n                                                v-model=\"form.title\" \n                                                label=\"Title\" \n                                                :error-messages=\"errors\"\n                                            />\n                                        </ValidationProvider>\n                                    </v-col>\n                                    <v-col cols=\"12\" sm=\"12\" md=\"12\">\n                                            <ValidationProvider v-slot=\"{ errors }\" name=\"Description\" rules=\"required\">\n                                                <v-textarea\n                                                v-model=\"form.description\"\n                                                :error-messages=\"errors\"\n                                                clearable\n                                                counter\n                                                label=\"Description\"\n                                                required\n                                                ></v-textarea>\n                                            </ValidationProvider>\n                                    </v-col>\n                                    <v-col cols=\"12\" sm=\"12\" md=\"12\">\n                                        <v-checkbox\n                                            v-model=\"cekVideo\"\n                                            label=\"Change video?\"\n                                            color=\"primary\"\n                                            hide-details\n                                        ></v-checkbox>\n                                    </v-col>\n                                \n                                    <v-col v-if=\"cekVideo\" cols=\"5\" sm=\"6\" md=\"6\">\n                                        <ValidationProvider v-slot=\"{ errors }\" name=\"Video\" rules=\"required\">  \n                                            <v-file-input\n                                                v-model=\"form.video\"\n                                                :error-messages=\"errors\"\n                                                accept=\"video/*\"\n                                                label=\"File input\"\n                                                required\n                                            ></v-file-input>\n                                        </ValidationProvider>\n                                    </v-col>\n                                    <v-col v-else cols=\"6\" sm=\"6\" md=\"6\">\n                                        <v-text-field label=\"File input\" :value=\"form.video\" disabled></v-text-field>\n                                    </v-col>\n\n                                    <v-col cols=\"6\" sm=\"6\" md=\"6\">\n                                        <ValidationProvider v-slot=\"{ errors }\" name=\"Language\" rules=\"required\">\n                                            <v-autocomplete\n                                                v-model=\"form.language\"\n                                                :items=\"languageList\"\n                                                :error-messages=\"errors\"\n                                                item-value=\"code\"\n                                                item-text=\"name\"\n                                                label=\"Language\"\n                                                required\n                                                hide-selected\n                                                clearable>\n                                            </v-autocomplete>\n                                        </ValidationProvider>\n                                    </v-col>\n                                </v-row>\n                            </v-form>\n                        </ValidationObserver>\n                    </v-container>\n                </v-card-text>\n                <v-card-actions>\n                    <v-spacer></v-spacer>\n                    <v-btn color=\"red accent-2\" text @click=\"clear\">Reset</v-btn>\n                    <v-btn color=\"primary\" text @click=\"checkForm()\">Save</v-btn>\n                </v-card-actions>\n            </v-card>\n        </v-container>\n    </v-container>\n</template>\n\n<style scoped>\n    @import url(\"https://fonts.googleapis.com/css?family=Share+Tech+Mono\");\n\n    table th + th { border-left:1px solid #dddddd; }\n    table td + td { border-left:1px solid #dddddd; }\n    tbody tr:nth-of-type(odd) {\n        background-color: rgba(0, 0, 0, .05);\n    }\n    \n    .v-data-table\n    /deep/\n    tbody\n    /deep/\n    tr:hover:not(.v-data-table__expanded__content) {\n        background: #8797a8 !important;\n    }\n\n    .v-select__selections {\n        max-width: 150px;\n        min-width: 100px;\n        border: none;\n    }\n\n    .flex {\n        display: -webkit-box;\n        display: -moz-box;\n        display: -ms-flexbox;\n        display: -webkit-flex;\n        display: flex;\n    }\n</style>\n\n<script>\n    import { required } from 'vee-validate/dist/rules'\n    import { extend, ValidationObserver, ValidationProvider, setInteractionMode } from 'vee-validate'\n    setInteractionMode('eager')\n\n    extend('required', {\n        ...required,\n        message: '{_field_} is required.'\n    })\n    export default {\n        components: {\n            ValidationProvider,\n            ValidationObserver,\n        },\n        data() {\n            return {\n                load: false,\n                dialog: false,\n                cekVideo: false,\n                typeInput: 'Update',\n                languageList : [\n                    { code : 'en-EN', name : 'English' },\n                    { code : 'id-ID', name : 'Indonesian' },\n                ],\n                form: {\n                    title: '',\n                    description: '',\n                    video: [],\n                    language: '',\n                },\n                updatedId: '',\n                errors: '',\n                video: new FormData,\n            }\n        },\n        methods: {\n            clear() {\n                this.readData();\n            },\n            readData() {\n                var uri = this.$apiUrl + '/videos/'+this.$route.params.id\n                this.$http.get(uri).then(response => {\n                    var item = response.data[0]\n                    this.form.title = item.title\n                    this.form.video = item.video.split('\\\\').pop().split('/').pop()\n                    console.log(this.form.video)\n                    this.form.language = item.language\n                    this.form.description = item.description\n                })\n            },\n            async checkForm() {\n                const isValid = await this.$refs.observer.validate();\n                if(isValid){\n                    this.updateData()\n                }\n            },\n            updateData() {\n                this.video.append('title', this.form.title);\n                if(this.cekVideo){\n                    this.video.append('video', \"/uploads/videos/\"+this.form.video.name);\n                    this.video.append('thumbnail', this.form.video.name.split('.')[0]+\".jpg\");\n                    this.video.append('file', this.form.video);\n                }\n                this.video.append('video', this.form.video);\n                this.video.append('language', this.form.language);\n                this.video.append('description', this.form.description);\n\n                var uri = this.$apiUrl + '/videos/'+this.$route.params.id\n                this.$swal({\n                        icon: 'info',\n                        title: 'Processing..',\n                        showConfirmButton: false,\n                        didOpen: function () {\n                            this.$swal.showLoading()\n                        }\n                    })\n                this.$http.post(uri, this.video, {\n                        headers: {\n                            'Authorization': 'Bearer ' + localStorage.getItem('token')\n                        }\n                    }).then(response => {\n                    this.$swal({\n                        icon: 'success',\n                        title: response.data.message,\n                        showConfirmButton: false,\n                        timer: 1500\n                    })\n                    this.readData(); //refresh data ini \n                    this.$router.push({\n                        name: 'myVideo'\n                    })\n                }).catch(error => {\n                    this.errors = error\n                    this.$swal({\n                        icon: 'error',\n                        title: 'Warning !',\n                        text: this.errors,\n                        showConfirmButton: false,\n                        timer: 1500\n                    })\n                    this.load = false;\n                })\n            },\n        },\n        mounted() {\n            this.readData();\n        },\n    }\n</script>"]}]}